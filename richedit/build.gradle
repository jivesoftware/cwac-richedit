apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'

android {
    compileSdkVersion 17
    buildToolsVersion "19.1.0"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

// based on http://stackoverflow.com/a/23672732/115145

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
//        options.links("http://docs.oracle.com/javase/7/docs/api/");
//        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

apply plugin: 'maven'

uploadArchives {
    def creds = getCredentials(REPOSITORY_ID)
    def snapshot_creds = getCredentials(SNAPSHOT_REPOSITORY_ID)
    repositories.mavenDeployer {
        pom.groupId = PUBLISH_GROUP_ID
        pom.artifactId = PUBLISH_ARTIFACT_ID
        pom.version = PUBLISH_VERSION

        repository(url: REPOSITORY_URL) {
            authentication(userName: creds["username"], password: creds["password"])
        }
        snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
            authentication(userName: snapshot_creds["username"], password: snapshot_creds["password"])
        }
    }
}

def getMavenSettingsCredentials() {
    String userHome = System.getProperty( "user.home" );
    File mavenSettings = new File(userHome, ".m2/settings.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}


def getCredentials(String repo) {
    def entries = getMavenSettingsCredentials()
    for (entry in entries) {
        if (repo.equalsIgnoreCase( entry."id".text() )) {
            return [username: entry.username.text(), password: entry.password.text()]
        }
    }
    return [username: '', password: '']
}